
#include "UnityShaderVariables.cginc"
#include "GlobalResources.hlsl"
#include "RaytracingFuncs.hlsl"

#pragma max_recursion_depth 1

// Input
float                           g_Zoom;
float                           g_AspectRatio;
uint                            g_ConvergenceStep;
uint                            g_FrameIndex;
float3                          g_SkyboxBottomColor;
float3                          g_SkyboxTopColor;
/*TextureCube<float4>             g_EnvTex;
SamplerState                    sampler_g_EnvTex;*/

// Output
RWTexture2D<float4>             g_Radiance;
RWTexture2D<float4>             g_Normal;
RWTexture2D<float4>             g_Albedo;
RWTexture2D<float4>              g_Depth;
RWTexture2D<float4>              g_Emission;
RWTexture2D<float4>              g_K;
RWTexture2D<float4>              g_Shape;

[shader("raygeneration")]
void MainRayGenShader()
{ 
    uint2 launchIndex = uint2(DispatchRaysIndex().x, DispatchRaysDimensions().y - DispatchRaysIndex().y - 1);
    uint2 launchDim = DispatchRaysDimensions().xy;

    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);
     // Initial random number generator seed for this pixel. The rngState will change every time we draw a random number.
    
    int convergenceStep = g_ConvergenceStep;
    uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(convergenceStep + g_FrameIndex) * uint(26699)) | uint(1);

    for(int spp = 0; spp < 1; spp++){
        float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);

        float2 ndcCoords = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
        
        ndcCoords = ndcCoords * 2 - float2(1, 1);
        ndcCoords = ndcCoords * g_Zoom;

        // Get a ray in view space.
        float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

        // Rotate the ray from view space to world space.
        float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);

        uint missShaderIndex = 0;
    
        RayDesc ray;
        ray.Origin      = _WorldSpaceCameraPos;
        ray.Direction   = rayDirection;
        ray.TMin        = 0;
        ray.TMax        = K_T_MAX;
              
        RayPayload payload;
        payload.albedo                  = float3(1, 1, 1);
        payload.emission                = float3(0, 0, 0);
        payload.rngState                = rngState;
        payload.bounceIndexOpaque       = 0;
        payload.bounceIndexTransparent  = 0;
        payload.bounceRayOrigin         = float3(0, 0, 0);
        payload.bounceRayDirection      = float3(0, 0, 0);
        payload.k                       = 1;
        
        MetaPayload meta;
        meta.normal                     = float3(0,0,0);
        meta.albedo                     = float3(-1,-1,-1);
        meta.emission                   = float3(0, 0, 0);
        meta.shape                      = float3(-1, -1, -1);
        meta.specular                   = float3(-1,-1,-1);
        meta.extCoMetal                 = -1;
        meta.roughSmooth                = -1;
        meta.ior                        = -1;
        payload.meta                    = meta;

        // Safe net for when shaders have compilation errors and don't increase the bounce index, resulting in an infinite loop.
        uint safeNet = 0;
        uint maxSafeNet = 10;

        float3 radiance = float3(0, 0, 0);
        float3 throughput = float3(1, 1, 1);
        do
        {
            TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

            payload.albedo = clamp(payload.albedo, 0, 1);

            radiance += payload.emission * throughput;

            throughput *= payload.albedo / max(0.001, payload.k);

            float pathStopProbability = 1;

    #define ENABLE_RUSSIAN_ROULETTE 1

    #if ENABLE_RUSSIAN_ROULETTE
            pathStopProbability = max(throughput.r, max(throughput.g, throughput.b));

            // Dark colors have higher chance to terminate the path early.
            if (pathStopProbability < RandomFloat01(payload.rngState))
                break;
    #endif

            throughput *= 1 / pathStopProbability;

            ray.Origin      = payload.bounceRayOrigin;
            ray.Direction   = payload.bounceRayDirection;
        }
        while ((payload.bounceIndexOpaque <= g_BounceCountOpaque) && (payload.bounceIndexTransparent <= g_BounceCountTransparent) && (++safeNet < maxSafeNet));

        g_Radiance[launchIndex] = float4(lerp(g_Radiance[launchIndex].xyz, radiance, 1 / float(convergenceStep + 1)), 1);

        convergenceStep++;
    }

    //g_Albedo[launchIndex] = g_Albedo[launchIndex] / rays;
    //g_Normal[launchIndex] = g_Normal[launchIndex] / rays;

    // meta info

    float2 ndcCoords = (frameCoord) / float2(launchDim.x - 1, launchDim.y - 1);
        
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    // Get a ray in view space.
    float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);

    RayDesc ray;
    ray.Origin      = _WorldSpaceCameraPos;
    ray.Direction   = rayDirection;
    ray.TMin        = 0;
    ray.TMax        = K_T_MAX;
              
    RayPayload payload;
    payload.albedo                  = float3(1, 1, 1);
    payload.emission                = float3(0, 0, 0);
    payload.rngState                = rngState;
    payload.bounceIndexOpaque       = 0;
    payload.bounceIndexTransparent  = 0;
    payload.bounceRayOrigin         = float3(0, 0, 0);
    payload.bounceRayDirection      = float3(0, 0, 0);
    payload.k                       = 1;
        
    MetaPayload meta;
    meta.normal                     = float3(0,0,0);
    meta.albedo                     = float3(-1,-1,-1);
    meta.emission                   = float3(0, 0, 0);
    meta.shape                      = float3(-1, -1, -1);
    meta.specular                   = float3(-1,-1,-1);
    meta.extCoMetal                 = -1;
    meta.roughSmooth                = -1;
    meta.ior                        = -1;
    payload.meta                    = meta;

    uint missShaderIndex = 0;

    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

    float depthD = distance(payload.bounceRayOrigin, _WorldSpaceCameraPos);
    g_Depth[launchIndex] = float4( float3(1,1,1) / depthD , 1);
    g_Albedo[launchIndex] = float4(payload.meta.albedo, 1);
    g_Normal[launchIndex] = float4(payload.meta.normal * 0.5 + 0.5, 1);
    g_Emission[launchIndex] = float4(payload.meta.emission, 1);
    g_K[launchIndex] = float4(payload.k, payload.k, payload.k, 1);
    g_Shape[launchIndex] = float4(payload.meta.shape, 1);
}

[shader("miss")]
void MainMissShader0(inout RayPayload payload : SV_RayPayload)
{
    /*payload.emission                = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;*/
    MainMissShader0(payload, WorldRayDirection(), g_SkyboxBottomColor, g_SkyboxTopColor);
}
