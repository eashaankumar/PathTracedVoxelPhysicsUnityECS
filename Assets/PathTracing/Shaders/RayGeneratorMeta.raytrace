
#include "UnityShaderVariables.cginc"
#include "GlobalResources.hlsl"
#include "RaytracingFuncs.hlsl"

#pragma max_recursion_depth 1

// Input
float                           g_Zoom;
float                           g_AspectRatio;

float3                          g_SkyboxBottomColor;
float3                          g_SkyboxTopColor;

// Output
RWTexture2D<float4>              g_Specular;
RWTexture2D<float4>              g_ExtCoMetal;
RWTexture2D<float4>              g_RoughSmooth;
RWTexture2D<float4>              g_IOR;

[shader("raygeneration")]
void MainRayGenShader()
{ 
    uint2 launchIndex = uint2(DispatchRaysIndex().x, DispatchRaysDimensions().y - DispatchRaysIndex().y - 1);
    uint2 launchDim = DispatchRaysDimensions().xy;

    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);
    
    // meta info

    float2 ndcCoords = (frameCoord) / float2(launchDim.x - 1, launchDim.y - 1);
        
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    // Get a ray in view space.
    float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);

    RayDesc ray;
    ray.Origin      = _WorldSpaceCameraPos;
    ray.Direction   = rayDirection;
    ray.TMin        = 0;
    ray.TMax        = K_T_MAX;
              
    RayPayload payload;
    payload.albedo                  = float3(1, 1, 1);
    payload.emission                = float3(0, 0, 0);
    payload.rngState                = 0;
    payload.bounceIndexOpaque       = 0;
    payload.bounceIndexTransparent  = 0;
    payload.bounceRayOrigin         = float3(0, 0, 0);
    payload.bounceRayDirection      = float3(0, 0, 0);
    payload.k                       = 1;
        
    MetaPayload meta;
    meta.normal                     = float3(0,0,0);
    meta.albedo                     = float3(-1,-1,-1);
    meta.emission                   = float3(0, 0, 0);
    meta.shape                      = float3(-1, -1, -1);
    meta.specular                   = float3(-1,-1,-1);
    meta.extCoMetal                 = -1;
    meta.roughSmooth                = -1;
    meta.ior                        = -1;
    payload.meta                    = meta;

    uint missShaderIndex = 0;

    TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

    float depthD = distance(payload.bounceRayOrigin, _WorldSpaceCameraPos);
    g_Specular[launchIndex] = float4(payload.meta.specular, 1);
    g_ExtCoMetal[launchIndex] = float4(float3(1,1,1) * payload.meta.extCoMetal, 1);
    g_RoughSmooth[launchIndex] = float4(float3(1,1,1) * payload.meta.roughSmooth, 1);
    g_IOR[launchIndex] = float4(float3(1,1,1) * payload.meta.ior, 1);
}

[shader("miss")]
void MainMissShader0(inout RayPayload payload : SV_RayPayload)
{
    /*payload.emission                = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;*/
    MainMissShader0(payload, WorldRayDirection(), g_SkyboxBottomColor, g_SkyboxTopColor);
}